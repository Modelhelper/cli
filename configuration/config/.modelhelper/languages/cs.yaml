language: cs # must be the same as template e.g cs, go, java
version: 3.0

usesNamespace: true
canInject: true

moduleLevelVariablePrefix: "_"

defaultImports: 
  - "using System;"


keys:
  interface:
    postfix: Repository
    prefix: I
  models:
    postfix: Model
  repository:   
    postfix: Repository
    inject:
      - logging
    imports: [
      "using {{ .Code.RootNamespace }}.Extensions"
    ]
  service:
    postfix: "Service"
  controller:
    postfix: "Controller" 
    imports: [
      "using {{ .Code.RootNamespace }}.Extensions"
    ]
  extension:
    postfix: "Extension"      
    namespace: "{{ .Code.RootNamespace }}.Extensions"

inject:  
  logging:
    name: ILogger<{{ .Name }}>
    propertyName: logger
    imports: [
      "using Microsoft.Logging"
    ]

## maps datatype to language type
## can be a mix of mssql, postgres, mysql etc
datatypes: 
  string: 
    notNull: string
    nullable: string
    nullableAlternative: string    
  bigint: 
    notNull: Int64
    nullable: Int64?
    nullableAlternative: nullable<Int64> # Int64
  binary: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # Byte[]
  bit: 
    notNull: bool
    nullable: bool?
    nullableAlternative: nullable<bool> # bool
  char: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # char
  date: 
    notNull: DateTimeOffset
    nullable: DateTimeOffset?
    nullableAlternative: nullable<DateTimeOffset> # DateTime
  datetime: 
    notNull: DateTimeOffset
    nullable: DateTimeOffset?
    nullableAlternative: nullable<DateTimeOffset> # DateTime
  datetime2: 
    notNull: DateTimeOffset
    nullable: DateTimeOffset?
    nullableAlternative: nullable<DateTimeOffset> # DateTime
  datetimeoffset: 
    notNull: DateTimeOffset
    nullable: DateTimeOffset?
    nullableAlternative: nullable<DateTimeOffset> # DateTime
  decimal: 
    notNull: decimal
    nullable: decimal?
    nullableAlternative: nullable<decimal> # decimal
  float: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # decimal
  geography: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # string
  geometry: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # string
  image: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # string
  int: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # int
  money: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # decimal
  nchar: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # string
  ntext: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # string
  numeric: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # decimal
  nvarchar: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # string
  real: 
    notNull: decimal
    nullable: decimal?
    nullableAlternative: nullable<decimal> # decimal
  smalldatetime: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # decimal
  smallint: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # decimal
  smallmoney: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # decimal
  text: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # string
  time: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # DateTime
  timestamp: 
    notNull: string
    nullable: string
    nullableAlternative: nullable<decimal> # string
  tinyint: 
    notNull: Int16
    nullable: Int16?
    nullableAlternative: nullable<Int16> # number
  uniqueidentifier: 
    notNull: Guid
    nullable: Guid
    nullableAlternative: nullable<Guid> # Guid
  varbinary: 
    notNull: Byte[]
    nullable: Byte[]
    nullableAlternative: Byte[] # Byte[]
  varchar: 
    notNull: string
    nullable: string
    nullableAlternative: string
  xml: 
    notNull: XElement
    nullable: XElement?
    nullableAlternative: nullable<XElement> 