
# mandatory, this is the template version
version: 3.0 

# target version 3.0
# cannot remember why this is added - remove??
injectKey: model # optional. this key points to the project files key. Must be provided if --export is used


# target version 3.0
language: cs # mandatory field. connects with correct language definition

# target version 3.1
languageVersion: 8 # if provided in 

# remove this?
scope: project | global


# the type specifies what can be done with the template. 
# an init can be used with mh code init and mh create project, can still be based on 
# A snippet can be used in both file and init or even other snippets to build complete code 

# target version for init and package: 3.1
# mandatory, default: file 
type: file | snippet | block | package | init  

# optional
description: |
    Long description if needed. Will show when 'mh template <template>'

# Should show then the user enter the 'mh template' command
# optional
short: This should be short and to the point

# optional
tags: [tag1, tag2, tag3] 

# what groups this template is included in
# is used to fetch templates within a group when using -tg in generate command
# optional, default is null
groups: [group1, group2, group3]

injectable: true

# Models: [table, tables, project, options, template, context, none, graphql, json]

# target version 3.0
# indicates the model classes to be injected
# optional, default is none
model: table # values entity | database | project | options | template | none | graphql | json

export:
  # settings here will only be used if --export or --export-file has been used as option argument in the cli

  # target version 3.0 
  # can use template syntax to use information from the models
  # if snippet is used, this will be the filename to inject the snippets to
  # optional if ExportType = none
  fileName: filename to be used in the export

  # optional (former ExportType). A key cannot contain . (dot)
  key: the key to be used to find correct path

  # target version 3.1
  # optional (used if ExportType is snippet)
  identifier: // **SNIPPET_PLACEHOLDER**

# target version 3.0 
# can use template syntax to use information from the models
# if snippet is used, this will be the filename to inject the snippets to
# optional if ExportType = none
exportFileName: file_to_export

    # optional (former ExportType). A key cannot contain . (dot)
locationKey: api-interface 
    

# target version 3.1
# optional (use if ExportType is snippet)
snippetIdentifier: // **SNIPPET_PLACEHOLDER**

# target version 3.1
# mandatory if type == init
steps:
    -step1:
        template: "template-ref-to-file"
        exportKey: ""
        import: project
    -step2:
        template: "cs-"
        target: "{{ .root }}/{{ .ProjectName }}/Setup.cs"
        inject: "ConfigureServices=>}"  # should be a valid regex pattern
    -step3:
        template: "cs-db-factory"
        import: project

# target version 3.0
# the body of the template
# mandatory
body: |
    This is the template body written with golang text/template specification
    the {{ . }} notation corresponds to the import type.

    the . inside a {{ . }} provides the context of the given import

    e.g if the template import entities you can loop through all entities like so:
    the context of . in the range is a list of entities
        {{ range . }}
            inside the loop, the context of . is each entity
            {{ .Schema }} // the schema of the current entity
            {{ .Name }} // entity name
            {{ .RowCount }}
            {{ .Type }} // table | view | stored procedure | function...
            {{ .Created }} // date for creation
        {{ end }} // end of loop