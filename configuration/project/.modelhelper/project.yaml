version: 3.0

defaultSource: lab
defaultKey: api

# should sources be defined here?
sources:
  -lab:
    name: lab
    connection: Data Source=patest01;Password=%**PWD_PATOLAB**%;User name=Test
    schema: dbo
    type: mssql
    mapping: 
      -IsActive:
        Name: "IsActive"
        isIgnored: true
        trueValue: 1 | true | yes
        falseValue: 0 | false | no
        deletedMarker: true
      -CreatedOn:
        name: "CreatedOn"  
        isIgnored: true        
        isCreationDate: true    
    groups:
      -histology:
        items: [
          entity_1
          entity_2
          entity_3
        ]

        options:
          -option_1: value_1
  -hist:
    name: hist
    desc: This is a short description about this source
    connection: Data Source=patest01;Password=%**PWD_PATOLAB**%;User name=Test
    schema: dbo
    type: mssql
    mapping: []
    code:
      connection: CreateForHistology()
  -api:
    name: api
    desc: this is a source that uses a graphql connection
    connection: "https://localhost:5000/graphql"
    type: graphql
    options:
      -option_1: value_1
      -option_2: value_2
  -sys:
    name: sys
    desc: setup for user defined input, based on the table => column model
    connection: ./models/* 
    type: file.yaml

## this section specifies how to generate code for this project
code:

  omitSourcePrefix: true
  
  # can also be set globally 
  global:
    variablePrefix: "_"
    variablePostfix: ""


  ## groups lets you group code in sections. This can be used to specify where code should be generated, language etc
  # use the group name 
  groups: [
    "db",
    "api"
  ]

  # what to inject when using %inject.key% ~ %inject.user%
  # uses the injectKey in the template to create a set of injects
  # inject:property | inject:namespace
  inject:
    -user:
      name: IUserContext
      keys: [repo]
      language: cs
      propertyName: user            
      imports: [
        "using PatoLab.BlaBla"
      ]
    -connectionFactory:
      keys: [repo]
      language: cs
      propertyName: connectionFactory
      name: IConnectionFactory      
    -logging:
      name: ILogger<{{ .Name }}>
      keys: [logging]
      language: cs      
      propertyName: logger
      imports: [
        "using Microsoft.Logging"
      ]

  types:
    -models:
      key: "model"      
      namePostfix: Model
      namespace: "PatoLab.Api.Core.Models"      

    -interfaces:   
      key: "interface"   
      namePostfix: Repository
      namePrefix: I
      imports: [
        "PatoLab.Api.Core.Models"
      ]
    -repository:   
      key: "repository"   
      namePostfix: Repository      
    -service:
      key: "service"  
      namePostfix: "Service"
  
  locations:
    -apiModels:
      key: "api.models"      
      path: ".\\src\\PatoLab.Api.Core\\Models"       

  
  fileHeader: |
    Text to place on the top of the file. This will create a template block, called fileheader-block.
    Inside it's possible to use go template syntax
    e.g Customer: {{ .Project.CustomerName }} and {{ .Developer.Name }}, {{ .Developer.Email }}

    This file connects to {{ .Source.Name }} to retrive data from {{ .Name }}

## this section lets you provide 
options:
  -option_1: value_1

# target version 3.6
custom:
  customer:
    name: PatoGen Analyse AS
    id: 12400C
