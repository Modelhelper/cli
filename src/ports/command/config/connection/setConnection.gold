package config

import (
	"fmt"
	"log"
	"modelhelper/cli/config"
	"modelhelper/cli/modelhelper"
	"modelhelper/cli/source"

	"github.com/gookit/color"

	"github.com/spf13/cobra"
)

func SetConnectionCommand() *cobra.Command {

	var setConnectionCmd = &cobra.Command{
		Use:   "connection [key]",
		Short: "Adds or updates a connection",
		Args:  cobra.ExactValidArgs(1),
		Run: func(cmd *cobra.Command, args []string) {

			key := args[0]
			conType, _ := cmd.Flags().GetString("type")
			conString, _ := cmd.Flags().GetString("constr")
			conDesc, _ := cmd.Flags().GetString("description")
			conSchema, _ := cmd.Flags().GetString("schema")
			merge, _ := cmd.Flags().GetBool("merge")
			def, _ := cmd.Flags().GetBool("default")

			if len(conType) == 0 {
				conType = "mssql"
			}

			if !source.IsConnectionTypeValid(conType) {
				log.Fatalf("The type: %s is not a valid type\n", conType)
			}

			if len(conString) == 0 {

				color.Red.Println("NB !!")

				fmt.Printf("\nThe --constr | -c option is empty. Consider to use a valid connection string for %s\n", conType)
				fmt.Printf("Use mh build constr %s to build a valid ConnectionString for a %[1]s\n", conType)
				// fmt.Println("Copy the generated connection string and copy and paste in this")
				fmt.Println("\nUse the option --key <keynam> to update the connection with the new connection string")
			}

			c := modelhelper.Connection{
				Name:             key,
				Description:      conDesc,
				Schema:           conSchema,
				Type:             conType,
				ConnectionString: conString,
			}

			err := config.SetConnection(key, &c, def, merge)

			if err != nil {
				log.Fatalln("Could not add or update connection ", err)
			}

			fmt.Printf("Succesfully updated connection list with %s (%s)", key, conType)

		},
	}

	setConnectionCmd.Flags().StringP("type", "t", "mssql", "The type of connection to add, default mssql")
	setConnectionCmd.Flags().StringP("constr", "c", "", "Sets the connection string for the type. For ms sql use this format \n'sqlserver://<user>:<password>@<server>?database=<databasename>'")
	setConnectionCmd.Flags().StringP("description", "d", "", "Sets a description")
	setConnectionCmd.Flags().String("schema", "", "Sets the schema or owner for the collection of entities")
	// setConnectionCmd.Flags().BoolP("groups", "d", false, "If true, the cli will ask for groups to be added")
	// setConnectionCmd.Flags().Bool("merge", false, "If true and the connection exists, empty properties will be replaced with the incoming.")
	setConnectionCmd.Flags().Bool("default", false, "If true set this connection to the default connection (default value is false)")

	setConnectionCmd.MarkFlagRequired("type")
	setConnectionCmd.MarkFlagRequired("constr")

	return setConnectionCmd
}
