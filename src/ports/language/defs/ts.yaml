language: ts # must be the same as template e.g cs, go, java (normally this should be the language file extension e.g startup.cs )
version: 3.0

short: Language defintion for Microsoft TypeScript (ts)
description: |
  The cs (Microsoft C#) language definition defines a setup with datatypes default imports (imports you normally add to code), 
  In C# it is possible to use two different methods of making a property nullable (in this lang def you can use either nullable or nullableAlternativ). 
  This can be mapped in the config or project by specifing the property 'useNullableAlternative' in the code section to true or false - default value is false (empty == false)
  
  This definition also uses a set of keys that is common in a C# project e.g model, interface, resolver etc. These keys is used in the templates to get
  a proper namespace, prefix and/or postfix. The key is also used in a project file to export the template to a proper location.



keys:
  interface:
    postfix: Repository
    prefix: I
  model:
    postfix: Model
  repository:   
    postfix: Repository
    inject:
      - logging
    imports: [
      "using {{ .Code.RootNamespace }}.Extensions"
    ]
  service:
    postfix: "Service"
  controller:
    postfix: "Controller" 
    imports: [
      "using {{ .Code.RootNamespace }}.Extensions"
    ]
  extension:
    postfix: "Extension"      
    namespace: "{{ .Code.RootNamespace }}.Extensions"

inject:  
  logging:
    name: ILogger<{{ .Name }}>
    propertyName: logger
    imports: [
      "using Microsoft.Logging"
    ]
  config:
    name: IConfiguration<{{ .Name }}>
    propertyName: config
    imports: [
      "using Microsoft.Extensions.Configuration;"
    ]

## maps datatype to language type
## can be a mix of mssql, postgres, mysql etc
datatypes: 
  string: 
    notNull: string
    nullable: string
    nullableAlternative: string    
  bigint: 
    notNull: number
    nullable: number
    nullableAlternative: number # number
  binary: 
    notNull: string
    nullable: string
    nullableAlternative: string # Byte[]
  bit: 
    notNull: boolean
    nullable: boolean
    nullableAlternative: boolean # boolean
  char: 
    notNull: string
    nullable: string
    nullableAlternative: number # char
  date: 
    notNull: Date
    nullable: Date
    nullableAlternative: Date # DateTime
  datetime: 
    notNull: Date
    nullable: DateTimeOffset
    nullableAlternative: Date # DateTime
  datetime2: 
    notNull: Date
    nullable: Date
    nullableAlternative: Date # DateTime
  datetimeoffset: 
    notNull: Date
    nullable: Date
    nullableAlternative: Date # DateTime
  number: 
    notNull: number
    nullable: number
    nullableAlternative: number # number
  float: 
    notNull: string
    nullable: string
    nullableAlternative: number # number
  geography: 
    notNull: string
    nullable: string
    nullableAlternative: number # string
  geometry: 
    notNull: string
    nullable: string
    nullableAlternative: number # string
  image: 
    notNull: string
    nullable: string
    nullableAlternative: number # string
  int: 
    notNull: number
    nullable: number
    nullableAlternative: number # int
  money: 
    notNull: number
    nullable: number
    nullableAlternative: number # number
  nchar: 
    notNull: string
    nullable: string
    nullableAlternative: number # string
  ntext: 
    notNull: string
    nullable: string
    nullableAlternative: number # string
  numeric: 
    notNull: number
    nullable: number
    nullableAlternative: number # number
  nvarchar: 
    notNull: string
    nullable: string
    nullableAlternative: number # string
  real: 
    notNull: number
    nullable: number
    nullableAlternative: number # number
  smalldatetime: 
    notNull: string
    nullable: string
    nullableAlternative: number # number
  smallint: 
    notNull: number
    nullable: number
    nullableAlternative: number # number
  smallmoney: 
    notNull: number
    nullable: number
    nullableAlternative: number # number
  text: 
    notNull: string
    nullable: string
    nullableAlternative: number # string
  time: 
    notNull: string
    nullable: string
    nullableAlternative: number # DateTime
  timestamp: 
    notNull: number
    nullable: number
    nullableAlternative: number # string
  tinyint: 
    notNull: number
    nullable: number
    nullableAlternative: number # number
  uniqueidentifier: 
    notNull: string
    nullable: string
    nullableAlternative: string # Guid
  varbinary: 
    notNull: Byte[]
    nullable: Byte[]
    nullableAlternative: Byte[] # Byte[]
  varchar: 
    notNull: string
    nullable: string
    nullableAlternative: string
  xml: 
    notNull: string
    nullable: string
    nullableAlternative: string 